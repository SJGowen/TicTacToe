@page "/"
@page "/tictactoe"
@using global::TicTacToe.Code

@inject GameState GameState

<PageTitle>TicTacToe</PageTitle>

<div>
    <h4>Select Player Types</h4>
    <form>
        <div class="mb-3">
            <label for="playerX" class="form-label">Player X</label>
            <select id="playerX" class="form-select" @bind="playerXType" disabled="@GameState.GameStarted">
                <option value="Human">Human</option>
                <option value="Computer">Computer</option>
            </select>
        </div>
        <div class="mb-3">
            <label for="playerO" class="form-label">Player O</label>
            <select id="playerO" class="form-select" @bind="playerOType" disabled="@GameState.GameStarted">
                <option value="Human">Human</option>
                <option value="Computer">Computer</option>
            </select>
        </div>
        <button type="button" class="btn btn-primary" @onclick="ToggleGame">
            @GameState.ButtonText
        </button>
    </form>
</div>

<div class="tictactoe-board @(GameState.GameStarted ? "" : "disabled")">
    @for (int row = 0; row < Constants.BoardSize; row++)
    {
        <div class="tictactoe-column">
            @for (int col = 0; col < Constants.BoardSize; col++)
            {
                int savedRow = row;
                int savedCol = col;
                <div class="tictactoe-gamepiece" @onclick="@(() => OnGamePieceClicked(savedRow, savedCol))">
                    @if (GameState.Board.Board[row, col].Style != Code.PieceStyle.Blank)
                    {
                        <span class="tictactoe-@GameState.Board.Board[row,col].Style.ToString().ToLower() @(GameState.Board.IsGamePieceAWinningPiece(row, col) ? "flashing" : "")">
                            @GameState.Board.Board[row, col].Style
                        </span>
                    }
                </div>
            }
        </div>
    }
</div>

<div class="turn-text-container">
    @if (GameState.GameStarted && !GameState.Board.GameComplete)
    {
        <h2 class="turn-text">@GameState.Board.CurrentStyle's Turn!</h2>
    }
    else if (GameState.GameStarted || !string.IsNullOrEmpty(GameState.GameCompleteMessage))
    {
        <h2 class="turn-text">@GameState.GameCompleteMessage</h2>
    }
</div>

@code {
    private Code.PlayerType playerXType = Code.PlayerType.Human;
    private Code.PlayerType playerOType = Code.PlayerType.Human;
    private CancellationTokenSource? cancellationTokenSource;

    public TicTacToe()
    {
        // Empty constructor required for WebAssembly
    }

    private async Task ToggleGame()
    {
        if (GameState.GameStarted)
        {
            await StopGame();
        }
        else
        {
            await StartGame();
        }
    }

    private async Task StartGame()
    {
        GameState.ResetGame(playerXType, playerOType);
        GameState.GameStarted = true;
        cancellationTokenSource = new CancellationTokenSource();

        try
        {
            while (!GameState.Board.GameComplete && !cancellationTokenSource.Token.IsCancellationRequested)
            {
                await GameState.Board.MakeComputerMoveIfNeededAsync();
                StateHasChanged();
                await Task.Delay(400, cancellationTokenSource.Token);
            }

            if (!cancellationTokenSource.Token.IsCancellationRequested)
            {
                GameState.UpdateGameCompleteMessage();
                GameState.GameStarted = false;
                StateHasChanged();
            }
        }
        catch (TaskCanceledException)
        {
            // Handle task cancellation if needed
        }
    }

    private Task StopGame()
    {
        cancellationTokenSource?.Cancel();
        GameState.ResetGame(playerXType, playerOType);
        return Task.CompletedTask;
    }

    private async Task OnGamePieceClicked(int row, int col)
    {
        if (GameState.GameStarted && !GameState.Board.GameComplete)
        {
            await GameState.Board.PieceClicked(row, col);
            StateHasChanged();
        }
    }
}
